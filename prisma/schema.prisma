generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  category_id        Int          @id @default(autoincrement())
  parent_category_id Int?
  name               String       @db.VarChar(255)
  description        String?      @db.Text
  categories         categories?  @relation("categoriesTocategories", fields: [parent_category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "categories_ibfk_1")
  other_categories   categories[] @relation("categoriesTocategories")
  products           products[]

  @@index([parent_category_id], map: "parent_category_id")
}

model order_items {
  order_item_id Int      @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  orders        orders   @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction, map: "order_items_ibfk_1")
  products      products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_ibfk_2")

  @@index([order_id], map: "order_id")
  @@index([product_id], map: "product_id")
}

model orders {
  order_id         Int           @id @default(autoincrement())
  client_name      String        @db.VarChar(255)
  email            String        @db.VarChar(255)
  phone            String?       @db.VarChar(50)
  shipping_address String        @db.Text
  order_date       DateTime?     @default(now()) @db.DateTime(0)
  status           String?       @default("Pending") @db.VarChar(50)
  total_amount     Decimal       @db.Decimal(10, 2)
  order_items      order_items[]
  payments         payments[]
}

model payments {
  payment_id Int       @id @default(autoincrement())
  order_id   Int
  amount     Decimal   @db.Decimal(10, 2)
  method     String?   @db.VarChar(255)
  status     String?   @db.VarChar(50)
  timestamp  DateTime? @default(now()) @db.DateTime(0)
  orders     orders    @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "payments_ibfk_1")

  @@index([order_id], map: "order_id")
}

model product_images {
  id         Int      @id @default(autoincrement())
  product_id Int
  url        String   @db.VarChar(512)
  alt_text   String?  @db.VarChar(255)
  sort_order Int?     @default(0)
  is_primary Boolean? @default(false)
  products   products @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction, map: "product_images_ibfk_1")

  @@index([product_id], map: "product_id")
}

model products {
  product_id     Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  description    String?          @db.Text
  price          Decimal          @db.Decimal(10, 2)
  category_id    Int?
  created_at     DateTime?        @default(now()) @db.DateTime(0)
  quantity       Int?             @default(0)
  order_items    order_items[]
  product_images product_images[]
  categories     categories?      @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "products_ibfk_1")
  reviews        reviews[]

  @@index([category_id], map: "category_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  review_id   Int       @id @default(autoincrement())
  product_id  Int
  client_name String?   @db.VarChar(255)
  rating      Int       @db.TinyInt
  comment     String?   @db.Text
  date        DateTime? @default(now()) @db.DateTime(0)
  products    products  @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_1")

  @@index([product_id], map: "product_id")
}

model users {
  id         BigInt   @id @unique(map: "id") @default(autoincrement()) @db.UnsignedBigInt
  username   String   @db.VarChar(50)
  email      String   @unique(map: "email") @db.VarChar(100)
  password   String   @db.VarChar(255)
  role       String   @db.VarChar(50)
  created_at DateTime @default(now()) @db.Timestamp(0)
}
